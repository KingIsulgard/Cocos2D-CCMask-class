{"name":"Cocos2d-mask-class","tagline":"A mask class for Cocos2D.","body":"### Cocos2D Mask Class\r\nCocos2D is a great framework for game development. Sadly it didn't contain one of the most required features for game development, masking.\r\nI've written a class CCMask which makes masking in Cocos2D fairly easy.\r\n\r\nYou just have to define an object and a mask. And that's it!\r\n\r\nInsert this class into your project:\r\n\r\nThe CCMask.h file\r\n`//`\r\n`//  CCMask.h`\r\n`//  Masking`\r\n`//`\r\n`//  Created by Gilles Lesire on 22/04/11.`\r\n`//  Copyright 2011 iCapps. All rights reserved.`\r\n`//  #import \"cocos2d.h\"`\r\n\r\n`@interface CCMask : CCSprite {`\r\n    `// Some screen information`\r\n    `CGSize size;`\r\n    `CGPoint screenMid;`\r\n    \r\n    `// The given sprites`\r\n    `CCSprite *maskSprite;`\r\n    `CCSprite *objectSprite;`\r\n    \r\n    `// RenderTextures use for masking`\r\n    `CCRenderTexture *maskNegative;`\r\n    `CCRenderTexture *masked;`\r\n`}`\r\n\r\n`// Initialize a masked object based on an object sprite and a mask sprite`\r\n`+ (id) createMaskForObject: (CCSprite *) object withMask: (CCSprite *) mask;`\r\n\r\n`// Redraw the masked image`\r\n`- (void) redrawMasked;`\r\n\r\n`// When dynamic masking is active, you have the ability to change the masked object or the mask itself`\r\n`- (void) setObject: (CCSprite *) object;`\r\n`- (void) setMask: (CCSprite *) mask;`\r\n\r\n`// Return the masked object as a sprite`\r\n`- (CCSprite *) getMaskedSprite;`\r\n\r\n`@end`\r\n\r\nThe CCMask.m file\r\n`//`\r\n`//  CCMask.m`\r\n`//  Masking`\r\n`//`\r\n`//  Created by Gilles Lesire on 22/04/11.`\r\n`//  Copyright 2011 iCapps. All rights reserved.`\r\n`//  #import \"CCMask.h\"`\r\n\r\n`@interface CCMask(Private)`\r\n`- (id) initWithObject: (CCSprite *) object mask: (CCSprite *) mask;`\r\n`- (void) resetObject;`\r\n`- (void) mask;`\r\n`@end`\r\n\r\n`@implementation CCMask`\r\n`+ (id) createMaskForObject: (CCSprite *) object withMask: (CCSprite *) mask {`\r\n    `return [[[self alloc] initWithObject: object mask: mask] autorelease];`\r\n`}`\r\n\r\n`- (id) initWithObject: (CCSprite *) object mask: (CCSprite *) mask {`\r\n    `NSAssert(object != nil, @\"Invalid sprite for object\");`\r\n    `NSAssert(mask != nil, @\"Invalid sprite for mask\");`\r\n    \r\n    `if((self = [super init])) {`\r\n        `[self setObject: object];`\r\n        `[self setMask: mask];`\r\n        \r\n        `// Get window size, we want masking over entire screen don't we?`\r\n        `size = [[CCDirector sharedDirector] winSize];`\r\n        \r\n        `// Create point with middle of screen`\r\n        `screenMid = ccp(size.width * 0.5f, size.height * 0.5f);`\r\n        \r\n        `// Create the rendureTextures to create cut outs`\r\n        `maskNegative = [CCRenderTexture renderTextureWithWidth: size.width height: size.height];`\r\n        `masked = [CCRenderTexture renderTextureWithWidth: size.width height: size.height];`\r\n        \r\n        `// Set render textures at middle of screen`\r\n        `maskNegative.position = screenMid;`\r\n        `masked.position = screenMid;`\r\n        \r\n        `// Set correct alpha channel for textures`\r\n        `[[maskNegative sprite] setBlendFunc: (ccBlendFunc) { GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA }];`\r\n        `[[masked sprite] setBlendFunc: (ccBlendFunc) { GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA }];`\r\n        \r\n        `// Load object into RenderTextures`\r\n        `[self resetObject];`\r\n        \r\n        `// Mask the object`\r\n        `[self mask];`\r\n        \r\n        `// Add the masked object to the screen`\r\n        `[self addChild: masked];`\r\n    `}`\r\n    `return self;`\r\n`}`\r\n\r\n`- (void) resetObject {`\r\n    `// Clear textures first`\r\n    `[maskNegative clear:0 g:0 b:0 a:1.0];`\r\n    `[masked clear:0 g:0 b:0 a:1.0];`\r\n    \r\n    `// Begin action for cut out`\r\n    `[maskNegative begin];`\r\n    \r\n    `// Load sprite`\r\n    `[objectSprite visit];`\r\n    \r\n    `// End loading sprites`\r\n    `[maskNegative end];`\r\n    \r\n    `// Begin action for masked`\r\n    `[masked begin];`\r\n    \r\n    `// Load sprite`\r\n    `[objectSprite visit];`\r\n    \r\n    `// End loading sprites`\r\n    `[masked end];`\r\n`}`\r\n\r\n`- (void) redrawMasked {`\r\n    `// Put object back on the screen`\r\n    `[self resetObject];`\r\n    `// Cut out the parts we don't want to see`\r\n    `[self mask];`\r\n`}`\r\n\r\n`- (void) mask {`\r\n    `// Set up the burn sprite that will \"knock out\" parts of the darkness layer depending on the alpha value of the pixels in the image.`\r\n    `[maskSprite setBlendFunc: (ccBlendFunc) { GL_ZERO, GL_ONE_MINUS_SRC_ALPHA }];`\r\n    `[maskSprite retain];`\r\n    \r\n    `// Start cutting out the parts we want to show`\r\n    `[maskNegative begin];`\r\n    \r\n    `// Limit drawing to the alpha channel`\r\n    `glColorMask(0.0f, 0.0f, 0.0f, 1.0f);`\r\n    \r\n    `// Draw`\r\n    `[maskSprite visit];`\r\n    \r\n    `// Reset color mask`\r\n    `glColorMask(1.0f, 1.0f, 1.0f, 1.0f);`\r\n    `[maskNegative end];`\r\n    `[self addChild: maskNegative];`\r\n    \r\n    `// Create a temporary mask of the left cut out`\r\n    `CCSprite *maskCut = maskNegative.sprite;`\r\n    `maskCut.position = screenMid;`\r\n    \r\n    `// Set up the burn sprite that will \"knock out\" parts of the darkness layer depending on the alpha value of the pixels in the image.`\r\n    `[maskCut setBlendFunc: (ccBlendFunc) { GL_ZERO, GL_ONE_MINUS_SRC_ALPHA }];`\r\n    `[maskCut retain];`\r\n    `[masked begin];`\r\n    \r\n    `// Limit drawing to the alpha channel`\r\n    `glColorMask(0.0f, 0.0f, 0.0f, 1.0f);`\r\n    \r\n    `// Draw`\r\n    `[maskCut visit];`\r\n    \r\n    `// Reset color mask`\r\n    `glColorMask(1.0f, 1.0f, 1.0f, 1.0f);`\r\n    `[masked end];`\r\n`}`\r\n\r\n`- (void) setObject: (CCSprite *) object {`\r\n    `objectSprite = object;`\r\n`}`\r\n\r\n`- (void) setMask: (CCSprite *) mask {`\r\n    `maskSprite = mask;`\r\n`}`\r\n\r\n`- (CCSprite *) getMaskedSprite {`\r\n    `return masked.sprite;`\r\n`}`\r\n\r\n`- (void) dealloc {`\r\n    `[super dealloc];`\r\n`}`\r\n\r\n`@end`\r\n\r\nHow to use it, example:\r\n`// Ask director the the window size`\r\n`CGSize size = [[CCDirector sharedDirector] winSize];`\r\n\r\n`// Create an object and a mask`\r\n`object = [CCSprite spriteWithFile:@\"Ball.png\"];`\r\n`mask = [CCSprite spriteWithFile:@\"star.png\"];`\r\n\r\n`// Set their positions`\r\n`object.position = ccp(size.width * 0.5f, size.height * 0.5f + 310);`\r\n`mask.position = ccp(size.width * 0.5f, size.height * 0.5f + 310);`\r\n\r\n`// Create a masked image based on the object and the mask and add it to the screen`\r\n`CCMask *masked = [CCMask createMaskForObject: object withMask: mask];`\r\n`[self addChild: masked];`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}